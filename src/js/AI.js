class ChessAi {
    constructor() {
    }

    calculateBestMove(game) {
        let possibleMove = game.moves();
        if (possibleMove.length === 0) return "$#";
        let score = 0;
        let bestScore = -9999;
        let bestMove = "";
        for (let i = 0; i < possibleMove.length; i++) {
            game.move(possibleMove[i]);
            score = this.minimax(game, false, 2);
            console.log(bestScore + " " + score);
            if (score > bestScore) {
                bestScore = score;
                bestMove = possibleMove[i];
            }
            game.undo();
        }
        return bestMove;
    }

    /**
     * 极大极小搜索树
     */
    minimax(game, player, deep, alpha = -9999, beta = 9999) {
        console.log("minimax " + deep)
        if (deep === 0) return -this.evaluateBoard(game.board());
        let bestMove;
        let score;
        let possibleMove = game.moves();
        if (player) {
            for (let i = 0; i < possibleMove.length; i++) {
                game.move(possibleMove[i]);
                score = this.minimax(game, !player, deep - 1, alpha, beta);
                if (score > alpha) {
                    alpha = score;
                }
                game.undo();
                if (alpha > beta) {
                    return alpha;
                }

            }
            return alpha;
        } else {
            for (let i = 0; i < possibleMove.length; i++) {
                game.move(possibleMove[i]);
                score = this.minimax(game, !player, deep - 1, alpha, beta);
                if (score < beta) {
                    beta = score;
                }
                game.undo();
                if (alpha > beta) {
                    return beta;
                }
            }
            return beta;
        }
    }

    /**
     * 局面评估函数
     * @param board 棋盘
     */
    evaluateBoard(board) {
        let score = 0;
        for (let i = 0; i < board.length; i++) {
            for (let j = 0; j < board[i].length; j++) {
                score += this.evaluatePiece(board[i][j],i,j)
                //位置评估
            }
        }
        return score;
    }

    /**
     * 棋子价值
     * @param piece
     * @param i
     * @param j
     * @return {number} 棋子价值
     */
    evaluatePiece(piece,i,j) {
        if (!piece) return 0;
        let type = piece.color + piece.type;
        switch (type) {
            case "br":
                return -50-evaluatePosition.br[i][j];
            case "bn":
                return -30-evaluatePosition.bn[i][j];
            case "bb":
                return -30-evaluatePosition.bb[i][j];
            case "bq":
                return -90-evaluatePosition.bq[i][j];
            case "bk":
                return -900-evaluatePosition.bk[i][j];
            case "bp":
                return -10-evaluatePosition.bp[i][j];
            case "wr":
                return 50+evaluatePosition.wr[i][j];
            case "wn":
                return 30+evaluatePosition.wn[i][j];
            case "wb":
                return 30+evaluatePosition.wb[i][j];
            case "wq":
                return 90+evaluatePosition.wq[i][j];
            case "wk":
                return 900+evaluatePosition.wk[i][j];
            case "wp":
                return 10+evaluatePosition.wp[i][j];
            default :
                return 0
        }
    }

}

class EvaluatePosition {
    constructor() {
        this.wq = [
            [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],
            [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],
            [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],
            [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],
            [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],
            [-1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],
            [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0],
            [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]
        ];
        this.wk = [
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],
            [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],
            [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],
            [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0]
        ];
        this.wr = [
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0],
        ];
        this.wb = [
            [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],
            [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],
            [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0],
            [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0],
            [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0],
            [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0],
            [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0],
            [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]
        ]
        this.wn = [
            [-5.0,-4.0,-3.0,-3.0,-3.0,-3.0,-4.0,-5.0],
            [-4.0,-2.0,0.0,0.0,0.0,0.0,-2.0,-4.0],
            [-3.0,0.0,1.0,1.5,1.5,1.0,0.0,-3.0],
            [-3.0,0.5,1.5,2.0,2.0,1.5,0.5,-3.0],
            [-3.0,0.0,1.5,2.0,2.0,1.5,0.0,-3.0],
            [-3.0,0.5,1.0,1.5,1.5,1.0,0.5,-3.0],
            [-4.0,-2.0,0.0,0.5,0.5,0.0,-2.0,-4.0],
            [-5.0,-4.0,-3.0,-3.0,-3.0,-3.0,-4.0,-5.0]
        ];
        this.wp=[
            [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
            [5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0],
            [1.0,1.0,2.0,3.0,3.0,2.0,1.0,1.0],
            [0.5,0.5,1.0,2.5,2.5,1.0,0.5,0.5],
            [0.0,0.0,0.0,2.0,2.0,0.0,0.0,0.0],
            [0.5,-0.5,-1.0,0.0,0.0,-1.0,-0.5,0.5],
            [0.5,1.0,1.0,-2.0,-2.0,1.0,1.0,0.5],
            [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        ];
        this.bp=[
            [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0],
            [0.5,1.0,1.0,-2.0,-2.0,1.0,1.0,0.5],
            [0.5,-0.5,-1.0,0.0,0.0,-1.0,-0.5,0.5],
            [0.0,0.0,0.0,2.0,2.0,0.0,0.0,0.0],
            [0.5,0.5,1.0,2.5,2.5,1.0,0.5,0.5],
            [1.0,1.0,2.0,3.0,3.0,2.0,1.0,1.0],
            [5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0],
            [0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0]
        ];
        this.bn=[
            [-5.0,-4.0,-3.0,-3.0,-3.0,-3.0,-4.0,-5.0],
            [-4.0,-2.0,0.0,0.0,0.0,0.0,-2.0,-4.0],
            [-3.0,0.0,1.0,1.5,1.5,1.0,0.0,-3.0],
            [-3.0,0.5,1.5,2.0,2.0,1.5,0.5,-3.0],
            [-3.0,0.0,1.5,2.0,2.0,1.5,0.0,-3.0],
            [-3.0,0.5,1.0,1.5,1.5,1.0,0.5,-3.0],
            [-4.0,-2.0,0.0,0.5,0.5,0.0,-2.0,-4.0],
            [-5.0,-4.0,-3.0,-3.0,-3.0,-3.0,-4.0,-5.0]
        ];
        this.bb=[
            [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0],
            [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],
            [-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0],
            [-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0],
            [-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0],
            [-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0],
            [-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0],
            [-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0]
        ];
        this.bk=[
            [2.0, 3.0, 1.0, 0.0, 0.0, 1.0, 3.0, 2.0],
            [2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 2.0, 2.0],
            [-1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0],
            [-2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0],
            [-3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0]
        ];
        this.br=[
            [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5],
            [0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5],
            [0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0, 0.0],
        ];
        this.bq=[
            [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0],
            [-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0],
            [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],
            [-0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],
            [0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5],
            [-1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0],
            [-1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0],
            [-2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0]
        ]
    }
}

const chessAi = new ChessAi();
const evaluatePosition=new EvaluatePosition();

export {chessAi}